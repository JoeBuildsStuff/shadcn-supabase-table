{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table-contacts",
  "type": "registry:block",
  "title": "Contacts Data Table with Supabase",
  "description": "A complete contacts data table with sorting, filtering, pagination, and row selection. Includes column management and action menus. Integrated with Supabase for real-time data fetching and management.",
  "dependencies": [
    "@tanstack/react-table",
    "@dnd-kit/core",
    "@dnd-kit/modifiers",
    "@dnd-kit/sortable",
    "@dnd-kit/utilities",
    "react-aria-components",
    "nanoid",
    "@supabase/ssr",
    "@supabase/supabase-js"
  ],
  "registryDependencies": [
    "button",
    "checkbox",
    "dropdown-menu",
    "input",
    "select",
    "table",
    "calendar",
    "popover",
    "command",
    "badge",
    "separator"
  ],
  "files": [
    {
      "path": "registry/data-table/lib/data-table.ts",
      "content": "import type { RowData } from \"@tanstack/react-table\";\nimport type { ColumnFiltersState, PaginationState, SortingState, VisibilityState } from \"@tanstack/react-table\";\n\nexport type DataTableConfig = typeof dataTableConfig;\n\nexport const dataTableConfig = {\n  textOperators: [\n    { label: \"Contains\", value: \"iLike\" as const },\n    { label: \"Does not contain\", value: \"notILike\" as const },\n    { label: \"Is\", value: \"eq\" as const },\n    { label: \"Is not\", value: \"ne\" as const },\n    { label: \"Is empty\", value: \"isEmpty\" as const },\n    { label: \"Is not empty\", value: \"isNotEmpty\" as const },\n  ],\n  numericOperators: [\n    { label: \"Is\", value: \"eq\" as const },\n    { label: \"Is not\", value: \"ne\" as const },\n    { label: \"Is less than\", value: \"lt\" as const },\n    { label: \"Is greater than\", value: \"gt\" as const },\n    { label: \"Is between\", value: \"isBetween\" as const },\n    { label: \"Is empty\", value: \"isEmpty\" as const },\n    { label: \"Is not empty\", value: \"isNotEmpty\" as const },\n  ],\n  dateOperators: [\n    { label: \"Is\", value: \"eq\" as const },\n    { label: \"Is not\", value: \"ne\" as const },\n    { label: \"Is before\", value: \"lt\" as const },\n    { label: \"Is after\", value: \"gt\" as const },\n    { label: \"Is between\", value: \"isBetween\" as const },\n    { label: \"Is empty\", value: \"isEmpty\" as const },\n    { label: \"Is not empty\", value: \"isNotEmpty\" as const },\n  ],\n  selectOperators: [\n    { label: \"Is\", value: \"eq\" as const },\n    { label: \"Is not\", value: \"ne\" as const },\n    { label: \"Is empty\", value: \"isEmpty\" as const },\n    { label: \"Is not empty\", value: \"isNotEmpty\" as const },\n  ],\n  multiSelectOperators: [\n    { label: \"Has any of\", value: \"inArray\" as const },\n    { label: \"Has none of\", value: \"notInArray\" as const },\n    { label: \"Is empty\", value: \"isEmpty\" as const },\n    { label: \"Is not empty\", value: \"isNotEmpty\" as const },\n  ],\n  booleanOperators: [\n    { label: \"Is\", value: \"eq\" as const },\n    { label: \"Is not\", value: \"ne\" as const },\n  ],\n  filterVariants: [\n    \"text\", \"number\", \"range\", \"date\", \"dateRange\", \"boolean\", \"select\", \"multiSelect\"\n  ] as const,\n  operators: [\n    \"iLike\", \"notILike\", \"eq\", \"ne\", \"inArray\", \"notInArray\", \n    \"isEmpty\", \"isNotEmpty\", \"lt\", \"gt\", \"isBetween\"\n  ] as const,\n}; \n\n// URL Search Parameters Types\nexport interface SearchParams {\n  [key: string]: string | string[] | undefined;\n}\n\nexport interface DataTableSearchParams {\n  page?: string;\n  pageSize?: string;\n  sort?: string;\n  filters?: string;\n  visibility?: string;\n}\n\nexport interface DataTableState {\n  pagination: PaginationState;\n  sorting: SortingState;\n  columnFilters: ColumnFiltersState;\n  columnVisibility: VisibilityState;\n}\n\n// Utility Functions for URL Search Parameters\nexport function parseSearchParams(searchParams: SearchParams): Partial<DataTableState> {\n  const state: Partial<DataTableState> = {};\n\n  // Parse pagination\n  const page = searchParams.page ? parseInt(searchParams.page as string) - 1 : 0;\n  const pageSize = searchParams.pageSize ? parseInt(searchParams.pageSize as string) : 10;\n  state.pagination = {\n    pageIndex: Math.max(0, page),\n    pageSize: Math.max(1, pageSize),\n  };\n\n  // Parse sorting\n  if (searchParams.sort) {\n    try {\n      const sortString = searchParams.sort as string;\n      state.sorting = sortString.split(',').map(sort => {\n        const [id, desc] = sort.split(':');\n        return {\n          id,\n          desc: desc === 'desc'\n        };\n      });\n    } catch {\n      state.sorting = [];\n    }\n  } else {\n    state.sorting = [];\n  }\n\n  // Parse filters\n  if (searchParams.filters) {\n    try {\n      const filtersString = decodeURIComponent(searchParams.filters as string);\n      state.columnFilters = JSON.parse(filtersString);\n    } catch {\n      state.columnFilters = [];\n    }\n  } else {\n    state.columnFilters = [];\n  }\n\n  // Parse column visibility\n  if (searchParams.visibility) {\n    try {\n      const visibilityString = decodeURIComponent(searchParams.visibility as string);\n      state.columnVisibility = JSON.parse(visibilityString);\n    } catch {\n      state.columnVisibility = {};\n    }\n  } else {\n    state.columnVisibility = {};\n  }\n\n  return state;\n}\n\nexport function serializeTableState(state: DataTableState): DataTableSearchParams {\n  const params: DataTableSearchParams = {};\n\n  // Serialize pagination\n  if (state.pagination.pageIndex > 0) {\n    params.page = (state.pagination.pageIndex + 1).toString();\n  }\n  if (state.pagination.pageSize !== 10) {\n    params.pageSize = state.pagination.pageSize.toString();\n  }\n\n  // Serialize sorting\n  if (state.sorting.length > 0) {\n    params.sort = state.sorting\n      .map(sort => `${sort.id}:${sort.desc ? 'desc' : 'asc'}`)\n      .join(',');\n  }\n\n  // Serialize filters\n  if (state.columnFilters.length > 0) {\n    params.filters = encodeURIComponent(JSON.stringify(state.columnFilters));\n  }\n\n  // Serialize column visibility (only if columns are hidden)\n  const hiddenColumns = Object.entries(state.columnVisibility).filter(([, visible]) => !visible);\n  if (hiddenColumns.length > 0) {\n    params.visibility = encodeURIComponent(JSON.stringify(state.columnVisibility));\n  }\n\n  return params;\n}\n\nexport function updateSearchParams(\n  currentParams: URLSearchParams,\n  newParams: DataTableSearchParams\n): URLSearchParams {\n  const updatedParams = new URLSearchParams(currentParams);\n\n  // Remove existing data table params\n  updatedParams.delete('page');\n  updatedParams.delete('pageSize');\n  updatedParams.delete('sort');\n  updatedParams.delete('filters');\n  updatedParams.delete('visibility');\n\n  // Add new params\n  Object.entries(newParams).forEach(([key, value]) => {\n    if (value !== undefined && value !== '') {\n      updatedParams.set(key, value);\n    }\n  });\n\n  return updatedParams;\n}\n\ndeclare module \"@tanstack/react-table\" {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  interface ColumnMeta<TData extends RowData, TValue> {\n    label?: string;\n    placeholder?: string;\n    variant?: FilterVariant;\n    options?: Option[];\n    range?: [number, number];\n    unit?: string;\n    icon?: React.FC<React.SVGProps<SVGSVGElement>>;\n  }\n}\n\nexport interface Option {\n  label: string;\n  value: string;\n  count?: number;\n  icon?: React.FC<React.SVGProps<SVGSVGElement>>;\n}\n\nexport type FilterOperator = DataTableConfig[\"operators\"][number];\nexport type FilterVariant = DataTableConfig[\"filterVariants\"][number];\n\nexport interface ExtendedColumnFilter<TData> {\n  id: Extract<keyof TData, string>;\n  value: string | string[] | number | boolean | Date;\n  variant: FilterVariant;\n  operator: FilterOperator;\n  filterId: string;\n}\n\n// Custom filter function that handles all our operators\nexport function customFilterFn(row: { getValue: (key: string) => unknown }, columnId: string, filterValue: { operator: string; value: unknown; variant: string }) {\n  if (!filterValue || typeof filterValue !== 'object') return true;\n  \n  const { operator, value, variant } = filterValue;\n  const cellValue = row.getValue(columnId);\n\n  // Handle empty/not empty operators first\n  if (operator === \"isEmpty\") {\n    return cellValue === null || cellValue === undefined || cellValue === \"\";\n  }\n  if (operator === \"isNotEmpty\") {\n    return cellValue !== null && cellValue !== undefined && cellValue !== \"\";\n  }\n\n  // If no value provided for other operators, don't filter\n  if (value === null || value === undefined || value === \"\") return true;\n\n  // Convert values for comparison\n  let compareValue = value;\n  \n  // Convert string numbers to actual numbers for numeric operations\n  if (variant === \"number\" && typeof value === \"string\" && value !== \"\") {\n    const numValue = parseFloat(value);\n    if (!isNaN(numValue)) {\n      compareValue = numValue;\n    }\n  }\n  \n  // Convert date strings to Date objects for date operations\n  if (variant === \"date\" && typeof value === \"string\" && value !== \"\") {\n    compareValue = new Date(value);\n  }\n  \n  // Convert string booleans to actual booleans\n  if (variant === \"boolean\" && typeof value === \"string\") {\n    compareValue = value === \"true\";\n  }\n\n  // Handle different operators\n  switch (operator) {\n    case \"eq\": // Is\n      // Handle date comparisons for equality\n      if (variant === \"date\") {\n        const cellDate = typeof cellValue === \"string\" ? new Date(cellValue) : cellValue;\n        const compareDate = compareValue instanceof Date ? compareValue : new Date(compareValue as string);\n        if (cellDate instanceof Date && compareDate instanceof Date && !isNaN(cellDate.getTime()) && !isNaN(compareDate.getTime())) {\n          // Compare dates by day (ignore time)\n          return cellDate.toDateString() === compareDate.toDateString();\n        }\n      }\n      return cellValue === compareValue;\n      \n    case \"ne\": // Is not\n      // Handle date comparisons for inequality\n      if (variant === \"date\") {\n        const cellDate = typeof cellValue === \"string\" ? new Date(cellValue) : cellValue;\n        const compareDate = compareValue instanceof Date ? compareValue : new Date(compareValue as string);\n        if (cellDate instanceof Date && compareDate instanceof Date && !isNaN(cellDate.getTime()) && !isNaN(compareDate.getTime())) {\n          // Compare dates by day (ignore time)\n          return cellDate.toDateString() !== compareDate.toDateString();\n        }\n      }\n      return cellValue !== compareValue;\n      \n    case \"iLike\": // Contains (case insensitive)\n      if (typeof cellValue === \"string\" && typeof compareValue === \"string\") {\n        return cellValue.toLowerCase().includes(compareValue.toLowerCase());\n      }\n      return false;\n      \n    case \"notILike\": // Does not contain (case insensitive)\n      if (typeof cellValue === \"string\" && typeof compareValue === \"string\") {\n        return !cellValue.toLowerCase().includes(compareValue.toLowerCase());\n      }\n      return true;\n      \n    case \"lt\": // Less than / Before\n      if (typeof cellValue === \"number\" && typeof compareValue === \"number\") {\n        return cellValue < compareValue;\n      }\n      // Handle date comparisons\n      if (variant === \"date\") {\n        const cellDate = typeof cellValue === \"string\" ? new Date(cellValue) : cellValue;\n        const compareDate = compareValue instanceof Date ? compareValue : new Date(compareValue as string);\n        if (cellDate instanceof Date && compareDate instanceof Date && !isNaN(cellDate.getTime()) && !isNaN(compareDate.getTime())) {\n          return cellDate < compareDate;\n        }\n      }\n      if (cellValue instanceof Date && compareValue instanceof Date) {\n        return cellValue < compareValue;\n      }\n      return false;\n      \n    case \"gt\": // Greater than / After\n      if (typeof cellValue === \"number\" && typeof compareValue === \"number\") {\n        return cellValue > compareValue;\n      }\n      // Handle date comparisons\n      if (variant === \"date\") {\n        const cellDate = typeof cellValue === \"string\" ? new Date(cellValue) : cellValue;\n        const compareDate = compareValue instanceof Date ? compareValue : new Date(compareValue as string);\n        if (cellDate instanceof Date && compareDate instanceof Date && !isNaN(cellDate.getTime()) && !isNaN(compareDate.getTime())) {\n          return cellDate > compareDate;\n        }\n      }\n      if (cellValue instanceof Date && compareValue instanceof Date) {\n        return cellValue > compareValue;\n      }\n      return false;\n      \n    case \"inArray\": // Has any of (for multi-select)\n      if (Array.isArray(compareValue)) {\n        return compareValue.includes(cellValue);\n      }\n      return false;\n      \n    case \"notInArray\": // Has none of (for multi-select)\n      if (Array.isArray(compareValue)) {\n        return !compareValue.includes(cellValue);\n      }\n      return true;\n      \n    case \"isBetween\": // Is between (for ranges)\n      if (Array.isArray(value) && value.length === 2) {\n        const [min, max] = value;\n        const minNum = typeof min === \"string\" ? parseFloat(min) : min;\n        const maxNum = typeof max === \"string\" ? parseFloat(max) : max;\n        \n        if (typeof cellValue === \"number\" && !isNaN(minNum as number) && !isNaN(maxNum as number)) {\n          return cellValue >= (minNum as number) && cellValue <= (maxNum as number);\n        }\n      }\n      return true;\n      \n    default:\n      return true;\n  }\n} ",
      "type": "registry:lib"
    },
    {
      "path": "registry/data-table/lib/supabase/client.ts",
      "content": "import { createBrowserClient } from '@supabase/ssr'\n\nexport function createClient() {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  )\n} ",
      "type": "registry:file",
      "target": "lib/supabase/client.ts"
    },
    {
      "path": "registry/data-table/lib/supabase/server.ts",
      "content": "import { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport async function createClient() {\n  const cookieStore = await cookies()\n\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) =>\n              cookieStore.set(name, value, options)\n            )\n          } catch {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions.\n          }\n        },\n      },\n    }\n  )\n} ",
      "type": "registry:file",
      "target": "lib/supabase/server.ts"
    },
    {
      "path": "registry/data-table/lib/supabase/middleware.ts",
      "content": "import { createServerClient } from '@supabase/ssr'\nimport { NextResponse, type NextRequest } from 'next/server'\n\nexport async function updateSession(request: NextRequest) {\n  let supabaseResponse = NextResponse.next({\n    request,\n  })\n\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll()\n        },\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value }) => request.cookies.set(name, value))\n          supabaseResponse = NextResponse.next({\n            request,\n          })\n          cookiesToSet.forEach(({ name, value, options }) =>\n            supabaseResponse.cookies.set(name, value, options)\n          )\n        },\n      },\n    }\n  )\n\n  // Do not run code between createServerClient and\n  // supabase.auth.getUser(). A simple mistake could make it very hard to debug\n  // issues with users being randomly logged out.\n\n  // IMPORTANT: DO NOT REMOVE auth.getUser()\n\n  const {\n    data: { user },\n  } = await supabase.auth.getUser()\n\n  if (\n    !user &&\n    !request.nextUrl.pathname.startsWith('/login') &&\n    !request.nextUrl.pathname.startsWith('/auth')\n  ) {\n    // no user, potentially respond by redirecting the user to the login page\n    const url = request.nextUrl.clone()\n    url.pathname = '/auth/login'\n    return NextResponse.redirect(url)\n  }\n\n  // IMPORTANT: You *must* return the supabaseResponse object as it is.\n  // If you're creating a new response object with NextResponse.next() make sure to:\n  // 1. Pass the request in it, like so:\n  //    const myNewResponse = NextResponse.next({ request })\n  // 2. Copy over the cookies, like so:\n  //    myNewResponse.cookies.setAll(supabaseResponse.cookies.getAll())\n  // 3. Change the myNewResponse object to fit your needs, but avoid changing\n  //    the cookies!\n  // 4. Finally:\n  //    return myNewResponse\n  // If this is not done, you may be causing the browser and server to go out\n  // of sync and terminate the user's session prematurely!\n\n  return supabaseResponse\n} ",
      "type": "registry:file",
      "target": "lib/supabase/middleware.ts"
    },
    {
      "path": "registry/data-table/.env.example",
      "content": "# Supabase Configuration\n# Get these from your Supabase project settings > API\nNEXT_PUBLIC_SUPABASE_URL=your_supabase_project_url\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key\n\n# Example:\n# NEXT_PUBLIC_SUPABASE_URL=https://your-project-ref.supabase.co\n# NEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n",
      "type": "registry:file",
      "target": ".env.example"
    },
    {
      "path": "registry/data-table/middleware.ts",
      "content": "import { type NextRequest } from 'next/server'\nimport { updateSession } from '@/lib/supabase/middleware'\n\nexport async function middleware(request: NextRequest) {\n  return await updateSession(request)\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * Feel free to modify this pattern to include more paths.\n     */\n    '/((?!_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n} ",
      "type": "registry:file",
      "target": "middleware.ts"
    },
    {
      "path": "registry/data-table/database.sql",
      "content": "-- Create the contacts table for the data table example\nCREATE TABLE IF NOT EXISTS registry_contacts (\n    id UUID DEFAULT gen_random_uuid() PRIMARY KEY,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    first_name TEXT,\n    last_name TEXT,\n    display_name TEXT,\n    nickname TEXT,\n    primary_email TEXT,\n    primary_phone TEXT,\n    company TEXT,\n    job_title TEXT,\n    birthday DATE,\n    notes TEXT,\n    is_favorite BOOLEAN DEFAULT FALSE,\n    tags TEXT[]\n);\n\n-- Create an index on commonly searched fields\nCREATE INDEX IF NOT EXISTS idx_registry_contacts_name ON registry_contacts(first_name, last_name);\nCREATE INDEX IF NOT EXISTS idx_registry_contacts_email ON registry_contacts(primary_email);\nCREATE INDEX IF NOT EXISTS idx_registry_contacts_company ON registry_contacts(company);\n\n-- Insert sample data\nINSERT INTO registry_contacts (\n    first_name, last_name, display_name, nickname, primary_email, primary_phone, \n    company, job_title, birthday, notes, is_favorite, tags\n) VALUES \n    ('Alice', 'Johnson', 'Alice Johnson', 'Ally', 'alice.johnson@acme.com', '2125551200', 'Acme Inc.', 'Software Engineer', '1990-03-12', 'Loves hiking and cats.', true, ARRAY['engineering', 'hiking']),\n    ('Brian', 'Wong', 'Brian Wong', 'Bri', 'brian.wong@starventures.io', '3105559876', 'Star Ventures', 'Product Manager', '1987-08-19', 'Interested in AI and blockchain.', false, ARRAY['product', 'ai']),\n    ('Camila', 'Santos', 'Camila Santos', null, 'camila.santos@fintech.co', '6465553344', 'FinTech Co.', 'Data Analyst', '1992-02-05', 'Speaks fluent Spanish and French.', true, ARRAY['analytics']),\n    ('Daniel', 'Lee', 'Daniel Lee', 'Dan', 'dan.lee@healthsolutions.com', '4085557766', 'Health Solutions', 'Operations Manager', '1985-09-17', 'Enjoys tennis and weekend trips.', false, ARRAY['ops']),\n    ('Elena', 'Martinez', 'Elena Martinez', null, 'elena.martinez@globalco.com', '3125550101', 'GlobalCo', 'Marketing Director', '1979-06-23', 'Responsible for global brand strategy.', true, ARRAY['marketing'])\nON CONFLICT (id) DO NOTHING;\n\n-- Enable Row Level Security (optional - uncomment if needed)\n-- ALTER TABLE registry_contacts ENABLE ROW LEVEL SECURITY;\n\n-- Create a policy that allows all operations (adjust as needed for your use case)\n-- CREATE POLICY \"Allow all operations on registry_contacts\" ON registry_contacts FOR ALL USING (true); ",
      "type": "registry:file",
      "target": "database.sql"
    },
    {
      "path": "registry/data-table/README.md",
      "content": "# Supabase Data Table Setup\n\nThis data table component integrates with Supabase for real-time data fetching and management.\n\n## Prerequisites\n\n- A Supabase project\n- Next.js 13+ with App Router\n- Node.js 18+\n\n## Setup Instructions\n\n### 1. Environment Variables\n\nCopy the `.env.example` file to `.env.local` in your project root:\n\n```bash\ncp .env.example .env.local\n```\n\nThen update `.env.local` with your Supabase credentials:\n\n```env\nNEXT_PUBLIC_SUPABASE_URL=https://your-project-ref.supabase.co\nNEXT_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key\n```\n\nGet these values from your Supabase project dashboard:\n1. Go to your Supabase project\n2. Navigate to Settings > API\n3. Copy the Project URL and anon/public key\n\n### 2. Database Setup\n\nRun the SQL commands in `database.sql` in your Supabase SQL editor:\n\n1. Go to your Supabase project dashboard\n2. Navigate to SQL Editor\n3. Copy and paste the contents of `database.sql`\n4. Run the query to create the `registry_contacts` table and sample data\n\n### 3. Middleware Setup\n\nIf you don't already have a `middleware.ts` file in your project root, copy the provided `middleware.ts` file there.\n\nIf you already have middleware, merge the Supabase session handling with your existing middleware:\n\n```typescript\nimport { updateSession } from '@/lib/supabase/middleware'\n\nexport async function middleware(request: NextRequest) {\n  // Your existing middleware logic...\n  \n  // Add Supabase session handling\n  return await updateSession(request)\n}\n```\n\n### 4. TypeScript Configuration\n\nMake sure your `tsconfig.json` includes the lib directory:\n\n```json\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  }\n}\n```\n\n## Usage\n\nAfter setup, you can use the data table component:\n\n```tsx\nimport { DataTableExampleContacts } from '@/components/data-table-example-contacts/data-table-example-contacts'\n\nexport default function ContactsPage() {\n  return (\n    <div className=\"container mx-auto py-10\">\n      <DataTableExampleContacts />\n    </div>\n  )\n}\n```\n\n## Database Schema\n\nThe contacts table includes the following fields:\n\n- `id` (UUID, Primary Key)\n- `created_at` (Timestamp)\n- `updated_at` (Timestamp)\n- `first_name` (Text)\n- `last_name` (Text)\n- `display_name` (Text)\n- `nickname` (Text, nullable)\n- `primary_email` (Text)\n- `primary_phone` (Text)\n- `company` (Text)\n- `job_title` (Text)\n- `birthday` (Date)\n- `notes` (Text)\n- `is_favorite` (Boolean)\n- `tags` (Text Array)\n\n## Customization\n\nYou can customize the data table by:\n\n1. Modifying the `Contacts` type in the component\n2. Updating the columns configuration\n3. Adding custom filters and sorting options\n4. Extending the database schema as needed\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Environment variables not loading**: Make sure your `.env.local` file is in the project root and restart your development server.\n\n2. **Database connection errors**: Verify your Supabase URL and anon key are correct.\n\n3. **Table not found**: Ensure you've run the database setup SQL commands.\n\n4. **Middleware conflicts**: If you have existing middleware, make sure to properly merge the Supabase session handling.\n\n### Getting Help\n\n- [Supabase Documentation](https://supabase.com/docs)\n- [Next.js App Router Guide](https://nextjs.org/docs/app)\n- [shadcn/ui Documentation](https://ui.shadcn.com) ",
      "type": "registry:file",
      "target": "README-supabase-setup.md"
    },
    {
      "path": "registry/data-table/components/ui/input-number.tsx",
      "content": "\"use client\"\n\nimport { ChevronDownIcon, ChevronUpIcon } from \"lucide-react\"\nimport { Button, Group, Input, NumberField as AriaNumberField } from \"react-aria-components\"\nimport { cn } from \"@/lib/utils\"\n\ninterface InputNumberProps {\n  value?: number | string\n  onChange?: (value: number) => void\n  placeholder?: string\n  className?: string\n  unit?: string\n}\n\nexport function InputNumber({ value, onChange, placeholder, className, unit }: InputNumberProps) {\n  return (\n    <AriaNumberField\n      value={typeof value === 'string' ? (value === '' ? undefined : Number(value)) : value}\n      onChange={onChange}\n      className={className}\n    >\n      <Group className=\"border-input outline-none data-focus-within:border-ring data-focus-within:ring-ring/50 data-focus-within:has-aria-invalid:ring-destructive/20 dark:data-focus-within:has-aria-invalid:ring-destructive/40 data-focus-within:has-aria-invalid:border-destructive relative inline-flex h-9 w-full items-center overflow-hidden rounded-md border text-sm whitespace-nowrap shadow-xs transition-[color,box-shadow] data-disabled:opacity-50 data-focus-within:ring-[3px] bg-transparent dark:bg-input/30\">\n        <div className=\"relative flex-1\">\n          {unit && (\n            <div className=\"absolute left-3 top-1/2 -translate-y-1/2 text-sm text-muted-foreground z-10\">\n              {unit}\n            </div>\n          )}\n          <Input \n            placeholder={placeholder}\n            className={cn(\n              \"text-foreground flex-1 px-3 py-2 tabular-nums border-0 outline-none w-full bg-transparent placeholder:text-muted-foreground\",\n              unit && \"pl-8\"\n            )} \n          />\n        </div>\n        <div className=\"flex h-[calc(100%+2px)] flex-col\">\n          <Button\n            slot=\"increment\"\n            className=\"border-input text-muted-foreground/80 hover:bg-accent hover:text-foreground -me-px flex h-1/2 w-6 flex-1 items-center justify-center border text-sm transition-[color,box-shadow] disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50\"\n          >\n            <ChevronUpIcon size={12} aria-hidden=\"true\" />\n          </Button>\n          <Button\n            slot=\"decrement\"\n            className=\"border-input text-muted-foreground/80 hover:bg-accent hover:text-foreground -me-px -mt-px flex h-1/2 w-6 flex-1 items-center justify-center border text-sm transition-[color,box-shadow] disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50\"\n          >\n            <ChevronDownIcon size={12} aria-hidden=\"true\" />\n          </Button>\n        </div>\n      </Group>\n    </AriaNumberField>\n  )\n} ",
      "type": "registry:ui"
    },
    {
      "path": "registry/data-table/components/data-table/data-table-column-header.tsx",
      "content": "import { Column } from \"@tanstack/react-table\"\nimport { ArrowDown, ArrowUp, ChevronsUpDown, EyeOff } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\ninterface DataTableColumnHeaderProps<TData, TValue>\n  extends React.HTMLAttributes<HTMLDivElement> {\n  column: Column<TData, TValue>\n  title: string\n}\n\nexport function DataTableColumnHeader<TData, TValue>({\n  column,\n  title,\n  className,\n}: DataTableColumnHeaderProps<TData, TValue>) {\n  if (!column.getCanSort()) {\n    return <div className={cn(className)}>{title}</div>\n  }\n\n  return (\n    <div className={cn(\"flex items-center gap-2\", className)}>\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"data-[state=open]:bg-accent -ml-3 h-8\"\n          >\n            <span>{title}</span>\n            {column.getIsSorted() === \"desc\" ? (\n              <ArrowDown />\n            ) : column.getIsSorted() === \"asc\" ? (\n              <ArrowUp />\n            ) : (\n              <ChevronsUpDown />\n            )}\n          </Button>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"start\">\n          <DropdownMenuItem onClick={() => column.toggleSorting(false)}>\n            <ArrowUp />\n            Asc\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={() => column.toggleSorting(true)}>\n            <ArrowDown />\n            Desc\n          </DropdownMenuItem>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>\n            <EyeOff />\n            Hide\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/data-table/components/data-table/data-table-filter.tsx",
      "content": "\"use client\"\n\nimport { Button } from \"@/components/ui/button\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ListFilter, Plus, ChevronRight } from \"lucide-react\";\nimport DataTableFilterItem from \"./data-table-filter-item\";\nimport { useState, useEffect } from \"react\";\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragEndEvent,\n} from \"@dnd-kit/core\";\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n} from \"@dnd-kit/sortable\";\nimport { Table } from \"@tanstack/react-table\";\nimport type { ExtendedColumnFilter, FilterVariant, FilterOperator } from \"@/lib/data-table\";\n\n// Generate a random ID\nfunction generateId(length: number = 8): string {\n  return Math.random().toString(36).substring(2, 2 + length);\n}\n\nexport default function DataTableFilter<TData>({ table }: { table: Table<TData> }) {\n  const [filters, setFilters] = useState<ExtendedColumnFilter<TData>[]>([]);\n  const [logicalOperator, setLogicalOperator] = useState<\"and\" | \"or\">(\"and\");\n  const [open, setOpen] = useState(false);\n\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  // Sync filters with table's column filters state\n  useEffect(() => {\n    const currentFilters = table.getState().columnFilters;\n    if (currentFilters.length > 0) {\n      const newFilters: ExtendedColumnFilter<TData>[] = currentFilters.map((filter, index) => {\n        // Get column metadata to determine variant\n        const column = table.getColumn(filter.id);\n        const columnMeta = column?.columnDef.meta;\n        const variant: FilterVariant = columnMeta?.variant ?? \"text\";\n        \n        // Extract filter details from the value object\n        const filterValue = filter.value as { operator?: string; value?: unknown; variant?: string } | undefined;\n        const operator = filterValue?.operator ?? \"iLike\";\n        const value = filterValue?.value ?? \"\";\n\n        return {\n          filterId: `${filter.id}-${index}`, // Create unique ID\n          id: filter.id as Extract<keyof TData, string>,\n          value: value as string | number | boolean | string[] | Date,\n          operator: operator as FilterOperator,\n          variant: variant,\n        };\n      });\n      setFilters(newFilters);\n    } else {\n      // If no filters are applied, show one empty filter item\n      setFilters([\n        {\n          filterId: generateId(),\n          id: \"\" as Extract<keyof TData, string>,\n          value: \"\",\n          operator: \"iLike\",\n          variant: \"text\",\n        },\n      ]);\n    }\n  }, [table.getState().columnFilters]);\n\n  const addFilter = () => {\n    const newFilter: ExtendedColumnFilter<TData> = {\n      filterId: generateId(),\n      id: \"\" as Extract<keyof TData, string>,\n      value: \"\",\n      operator: \"iLike\",\n      variant: \"text\",\n    };\n    setFilters([...filters, newFilter]);\n  };\n\n  const removeFilter = (filterId: string) => {\n    setFilters(filters.filter((f) => f.filterId !== filterId));\n  };\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n    if (over && active.id !== over.id) {\n      setFilters((items) => {\n        const oldIndex = items.findIndex((item) => item.filterId === active.id);\n        const newIndex = items.findIndex((item) => item.filterId === over.id);\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n\n  const updateFilter = (filterId: string, newFilter: ExtendedColumnFilter<TData>) => {\n    setFilters(\n      filters.map((f) => (f.filterId === filterId ? newFilter : f))\n    );\n  };\n\n  const applyFilters = () => {\n    // Get valid filters (those with column selected and either have value or are empty/not empty operators)\n    const validFilters = filters.filter((f) => \n      f.id && f.operator && (\n        (f.value !== \"\" && f.value !== null && f.value !== undefined) || \n        [\"isEmpty\", \"isNotEmpty\"].includes(f.operator)\n      )\n    );\n\n    // Convert to TanStack table format with custom filter functions\n    const columnFilters = validFilters.map((filter) => {\n      return {\n        id: filter.id as string,\n        value: {\n          operator: filter.operator,\n          value: filter.value,\n          variant: filter.variant\n        }\n      };\n    });\n    \n    table.setColumnFilters(columnFilters);\n    setOpen(false); // Close the popover after applying filters\n  };\n\n  // Get the actual number of applied filters from the table state\n  const appliedFilterCount = table.getState().columnFilters.length;\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button variant=\"outline\">\n          <ListFilter className=\"h-4 w-4\" />\n          <div>Filter</div>\n          <Badge variant=\"secondary\">\n            {appliedFilterCount}\n          </Badge>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent align=\"start\" className=\"w-fit p-3\">\n        <div className=\"flex w-full flex-col gap-3\">\n          <p className=\"text-sm font-medium text-muted-foreground\">\n            Filter by:\n          </p>\n          <DndContext\n            sensors={sensors}\n            collisionDetection={closestCenter}\n            onDragEnd={handleDragEnd}\n          >\n            <SortableContext\n              items={filters.map((item) => item.filterId)}\n              strategy={verticalListSortingStrategy}\n            >\n              <div className=\"flex flex-col gap-3\">\n                {filters.map((filter, index) => (\n                  <DataTableFilterItem\n                    key={filter.filterId}\n                    table={table}\n                    filter={filter}\n                    onFilterChange={(newFilter) => updateFilter(filter.filterId, newFilter)}\n                    onRemove={() => removeFilter(filter.filterId)}\n                    index={index}\n                    logicalOperator={logicalOperator}\n                    onLogicalOperatorChange={setLogicalOperator}\n                  />\n                ))}\n              </div>\n            </SortableContext>\n          </DndContext>\n\n          <Separator />\n\n          <div className=\"flex flex-row items-center justify-between gap-3\">\n            <Button\n              variant=\"secondary\"\n              className=\"flex flex-row items-center h-8\"\n              onClick={addFilter}\n            >\n              <Plus className=\"h-4 w-4\" />\n              Add\n            </Button>\n            <Button\n              variant=\"default\"\n              className=\"flex flex-row items-center h-8\"\n              onClick={applyFilters}\n            >\n              Apply\n              <ChevronRight className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/data-table/components/data-table/data-table-filter-item.tsx",
      "content": "\"use client\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\"\nimport { Input } from \"@/components/ui/input\"\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Calendar } from \"@/components/ui/calendar\"\nimport { CalendarDays, ChevronsUpDown, GripVertical, X } from \"lucide-react\"\nimport { useState } from \"react\"\nimport { useSortable } from \"@dnd-kit/sortable\"\nimport { CSS } from \"@dnd-kit/utilities\"\nimport { Table } from \"@tanstack/react-table\"\nimport { cn } from \"@/lib/utils\"\nimport { dataTableConfig } from \"@/lib/data-table\"\nimport type { ExtendedColumnFilter, FilterVariant, FilterOperator } from \"@/lib/data-table\"\nimport { InputNumber } from \"@/components/ui/input-number\"\n\n// Format date utility\nfunction formatDate(\n  date: Date | string | number | undefined,\n  opts: Intl.DateTimeFormatOptions = {},\n) {\n  if (!date) return \"\";\n\n  try {\n    return new Intl.DateTimeFormat(\"en-US\", {\n      month: opts.month ?? \"long\",\n      day: opts.day ?? \"numeric\", \n      year: opts.year ?? \"numeric\",\n      ...opts,\n    }).format(new Date(date));\n  } catch {\n    return \"\";\n  }\n}\n\n// Get filter operators for a specific variant\nfunction getFilterOperators(filterVariant: FilterVariant) {\n  const operatorMap: Record<FilterVariant, { label: string; value: FilterOperator }[]> = {\n    text: dataTableConfig.textOperators,\n    number: dataTableConfig.numericOperators,\n    range: dataTableConfig.numericOperators,\n    date: dataTableConfig.dateOperators,\n    dateRange: dataTableConfig.dateOperators,\n    boolean: dataTableConfig.booleanOperators,\n    select: dataTableConfig.selectOperators,\n    multiSelect: dataTableConfig.multiSelectOperators,\n  };\n\n  return operatorMap[filterVariant] ?? dataTableConfig.textOperators;\n}\n\n// Get default filter operator for a variant\nfunction getDefaultFilterOperator(filterVariant: FilterVariant): FilterOperator {\n  const operators = getFilterOperators(filterVariant);\n  return operators[0]?.value ?? \"iLike\";\n}\n\ninterface DataTableFilterItemProps<TData> {\n  table: Table<TData>\n  filter: ExtendedColumnFilter<TData>\n  onFilterChange: (filter: ExtendedColumnFilter<TData>) => void\n  onRemove: () => void\n  index: number\n  logicalOperator: \"and\" | \"or\"\n  onLogicalOperatorChange: (value: \"and\" | \"or\") => void\n}\n\nexport default function DataTableFilterItem<TData>({\n  table,\n  filter,\n  onFilterChange,\n  onRemove,\n  index,\n  logicalOperator,\n  onLogicalOperatorChange,\n}: DataTableFilterItemProps<TData>) {\n  const [columnOpen, setColumnOpen] = useState(false)\n  const [operatorOpen, setOperatorOpen] = useState(false)\n  const [valueOpen, setValueOpen] = useState(false)\n  const [calendarOpen, setCalendarOpen] = useState(false)\n\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: filter.filterId })\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1,\n  }\n\n  const columns = table\n    .getAllColumns()\n    .filter(\n      (column) =>\n        column.getCanFilter() &&\n        column.id !== \"select\" &&\n        column.id !== \"actions\"\n    )\n\n  const selectedColumn = columns.find((col) => col.id === filter.id)\n  const columnMeta = selectedColumn?.columnDef.meta\n  const filterVariant: FilterVariant = columnMeta?.variant ?? \"text\"\n  const operators = getFilterOperators(filterVariant)\n\n  const renderLogicalOperator = () => {\n    if (index === 0) {\n      return <div className=\"w-16 text-center text-sm font-medium text-muted-foreground\">Where</div>\n    }\n    if (index === 1) {\n      return (\n        <Button\n          variant=\"secondary\"\n          size=\"sm\"\n          className=\"w-16 capitalize\"\n          onClick={() =>\n            onLogicalOperatorChange(logicalOperator === \"and\" ? \"or\" : \"and\")\n          }\n        >\n          {logicalOperator}\n        </Button>\n      )\n    }\n    return <div className=\"w-16 text-center text-sm font-medium text-muted-foreground capitalize\">{logicalOperator}</div>\n  }\n\n  const renderValueInput = () => {\n    const placeholder = columnMeta?.placeholder ?? \"Enter value...\"\n    \n    // Disable input for isEmpty and isNotEmpty operators\n    const isEmptyOperator = [\"isEmpty\", \"isNotEmpty\"].includes(filter.operator)\n    if (isEmptyOperator) {\n      return (\n        <div className=\"w-40 flex items-center justify-center text-sm text-muted-foreground border rounded px-3 py-2\">\n          No value needed\n        </div>\n      )\n    }\n\n    switch (filterVariant) {\n      case \"select\": {\n        const options = columnMeta?.options ?? []\n        return (\n          <Popover open={valueOpen} onOpenChange={setValueOpen}>\n            <PopoverTrigger asChild>\n              <Button variant=\"outline\" className=\"w-40 justify-start\">\n                {filter.value ? \n                  (options.find(option => option.value === filter.value)?.label ?? String(filter.value))\n                  : \"Select value...\"\n                }\n                <ChevronsUpDown className=\"ml-auto h-4 w-4 shrink-0 opacity-50\" />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-40 p-0\" align=\"start\">\n              <Command>\n                <CommandInput placeholder=\"Search...\" />\n                <CommandList>\n                  <CommandEmpty>No options found.</CommandEmpty>\n                  <CommandGroup>\n                    {options.map((option) => (\n                      <CommandItem\n                        key={option.value}\n                        onSelect={() => {\n                          onFilterChange({ ...filter, value: option.value })\n                          setValueOpen(false)\n                        }}\n                      >\n                        {option.icon && <option.icon className=\"mr-2 h-4 w-4\" />}\n                        {option.label}\n                      </CommandItem>\n                    ))}\n                  </CommandGroup>\n                </CommandList>\n              </Command>\n            </PopoverContent>\n          </Popover>\n        )\n      }\n\n      case \"multiSelect\": {\n        const options = columnMeta?.options ?? []\n        const selectedValues = Array.isArray(filter.value) ? filter.value : []\n        \n        return (\n          <Popover open={valueOpen} onOpenChange={setValueOpen}>\n            <PopoverTrigger asChild>\n              <Button variant=\"outline\" className=\"w-40 justify-start\">\n                {selectedValues.length > 0 ? (\n                  <div className=\"flex flex-wrap gap-1\">\n                    {selectedValues.slice(0, 2).map((value) => (\n                      <Badge key={String(value)} variant=\"secondary\" className=\"text-xs\">\n                        {(options.find(option => option.value === value)?.label ?? String(value))}\n                      </Badge>\n                    ))}\n                    {selectedValues.length > 2 && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        +{selectedValues.length - 2}\n                      </Badge>\n                    )}\n                  </div>\n                ) : (\n                  \"Select values...\"\n                )}\n                <ChevronsUpDown className=\"ml-auto h-4 w-4 shrink-0 opacity-50\" />\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-40 p-0\" align=\"start\">\n              <Command>\n                <CommandInput placeholder=\"Search...\" />\n                <CommandList>\n                  <CommandEmpty>No options found.</CommandEmpty>\n                  <CommandGroup>\n                    {options.map((option) => (\n                      <CommandItem\n                        key={option.value}\n                        onSelect={() => {\n                          const newValues = selectedValues.includes(option.value)\n                            ? selectedValues.filter(v => v !== option.value)\n                            : [...selectedValues, option.value]\n                          onFilterChange({ ...filter, value: newValues })\n                        }}\n                      >\n                        <Checkbox\n                          checked={selectedValues.includes(option.value)}\n                          className=\"mr-2\"\n                        />\n                        {option.icon && <option.icon className=\"mr-2 h-4 w-4\" />}\n                        {option.label}\n                      </CommandItem>\n                    ))}\n                  </CommandGroup>\n                </CommandList>\n              </Command>\n            </PopoverContent>\n          </Popover>\n        )\n      }\n\n      case \"boolean\": {\n        return (\n          <Select\n            value={filter.value as string}\n            onValueChange={(value) => onFilterChange({ ...filter, value })}\n          >\n            <SelectTrigger className=\"w-40\">\n              <SelectValue placeholder=\"Select...\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"true\">True</SelectItem>\n              <SelectItem value=\"false\">False</SelectItem>\n            </SelectContent>\n          </Select>\n        )\n      }\n\n      case \"date\": {\n        const date = filter.value ? new Date(filter.value as string) : undefined\n        return (\n          <Popover open={calendarOpen} onOpenChange={setCalendarOpen}>\n            <PopoverTrigger asChild>\n              <Button\n                variant=\"outline\"\n                className={cn(\n                  \"w-40 justify-start text-left font-normal\",\n                  !date && \"text-muted-foreground\"\n                )}\n              >\n                <CalendarDays className=\"mr-2 h-4 w-4\" />\n                {date ? formatDate(date) : \"Pick a date\"}\n              </Button>\n            </PopoverTrigger>\n            <PopoverContent className=\"w-auto p-0\" align=\"start\">\n              <Calendar\n                mode=\"single\"\n                selected={date}\n                onSelect={(selectedDate) => {\n                  onFilterChange({ \n                    ...filter, \n                    value: selectedDate ? selectedDate.toISOString() : \"\" \n                  })\n                  setCalendarOpen(false)\n                }}\n                initialFocus\n              />\n            </PopoverContent>\n          </Popover>\n        )\n      }\n\n      case \"number\": {\n        const unit = columnMeta?.unit\n        \n        // Handle \"is between\" operator with two inputs\n        if (filter.operator === \"isBetween\") {\n          const values = Array.isArray(filter.value) ? filter.value : [\"\", \"\"]\n          return (\n            <div className=\"flex gap-2 w-80\">\n              <InputNumber\n                value={values[0] || \"\"}\n                onChange={(value) => {\n                  const newValues = [String(value || \"\"), values[1] || \"\"]\n                  onFilterChange({ ...filter, value: newValues })\n                }}\n                placeholder=\"Min\"\n                unit={unit}\n                className=\"flex-1\"\n              />\n              <div className=\"flex items-center text-sm text-muted-foreground\">and</div>\n              <InputNumber\n                value={values[1] || \"\"}\n                onChange={(value) => {\n                  const newValues = [values[0] || \"\", String(value || \"\")]\n                  onFilterChange({ ...filter, value: newValues })\n                }}\n                placeholder=\"Max\"\n                unit={unit}\n                className=\"flex-1\"\n              />\n            </div>\n          )\n        }\n        \n        return (\n          <InputNumber\n            value={filter.value as string}\n            onChange={(value) => onFilterChange({ ...filter, value: String(value || \"\") })}\n            placeholder={placeholder}\n            unit={unit}\n            className=\"w-40\"\n          />\n        )\n      }\n\n      default: {\n        return (\n          <Input\n            placeholder={placeholder}\n            value={filter.value as string}\n            onChange={(e) => onFilterChange({ ...filter, value: e.target.value })}\n            className=\"w-40\"\n          />\n        )\n      }\n    }\n  }\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      className=\"flex flex-row items-center gap-2\"\n    >\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        {...attributes}\n        {...listeners}\n        className=\"cursor-grab active:cursor-grabbing\"\n      >\n        <GripVertical className=\"h-4 w-4\" />\n      </Button>\n\n      {renderLogicalOperator()}\n\n      <Popover open={columnOpen} onOpenChange={setColumnOpen}>\n        <PopoverTrigger asChild>\n          <Button variant=\"outline\" className=\"w-32 justify-start\">\n            <span className=\"truncate\">\n              {(selectedColumn?.columnDef.meta?.label ?? filter.id) || \"Column\"}\n            </span>\n            <ChevronsUpDown className=\"ml-auto h-4 w-4 shrink-0 opacity-50\" />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-32 p-0\" align=\"start\">\n          <Command>\n            <CommandInput placeholder=\"Search...\" />\n            <CommandList>\n              <CommandEmpty>No columns found.</CommandEmpty>\n              <CommandGroup>\n                {columns.map((column) => (\n                  <CommandItem\n                    key={column.id}\n                    onSelect={() => {\n                      const newVariant = column.columnDef.meta?.variant ?? \"text\"\n                      const newOperator = getDefaultFilterOperator(newVariant)\n                      onFilterChange({\n                        ...filter,\n                        id: column.id as Extract<keyof TData, string>,\n                        variant: newVariant,\n                        operator: newOperator,\n                        value: \"\",\n                      })\n                      setColumnOpen(false)\n                    }}\n                  >\n                    {(column.columnDef.meta?.label ?? column.id)}\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n\n      <Popover open={operatorOpen} onOpenChange={setOperatorOpen}>\n        <PopoverTrigger asChild>\n          <Button variant=\"outline\" className=\"w-32 justify-start\">\n            <span className=\"truncate\">\n              {(operators.find(op => op.value === filter.operator)?.label ?? \"Operator\")}\n            </span>\n            <ChevronsUpDown className=\"ml-auto h-4 w-4 shrink-0 opacity-50\" />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-[9rem] p-0\" align=\"start\">\n          <Command>\n            <CommandList>\n              <CommandGroup>\n                {operators.map((operator) => (\n                  <CommandItem\n                    key={operator.value}\n                    onSelect={() => {\n                      onFilterChange({ ...filter, operator: operator.value })\n                      setOperatorOpen(false)\n                    }}\n                  >\n                    {operator.label}\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n\n      {renderValueInput()}\n\n      <Button variant=\"ghost\" size=\"icon\" onClick={onRemove}>\n        <X className=\"h-4 w-4\" />\n      </Button>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/data-table/components/data-table/data-table-pagination.tsx",
      "content": "import { Table } from \"@tanstack/react-table\"\nimport {\n  ChevronLeft,\n  ChevronRight,\n  ChevronsLeft,\n  ChevronsRight,\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\n\ninterface DataTablePaginationProps<TData> {\n  table: Table<TData>\n}\n\nexport function DataTablePagination<TData>({\n  table,\n}: DataTablePaginationProps<TData>) {\n  return (\n    <div className=\"flex items-center justify-between\">\n      <div className=\"text-muted-foreground flex-1 text-sm\">\n        {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n        {table.getFilteredRowModel().rows.length}  selected.\n      </div>\n      <div className=\"flex items-center space-x-6 lg:space-x-8\">\n        <div className=\"flex items-center space-x-2\">\n          <p className=\"text-sm font-medium\">Rows per page</p>\n          <Select\n            value={`${table.getState().pagination.pageSize}`}\n            onValueChange={(value) => {\n              table.setPageSize(Number(value))\n            }}\n          >\n            <SelectTrigger className=\"h-8 w-[70px]\">\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\n            </SelectTrigger>\n            <SelectContent side=\"top\">\n              {[10, 20, 25, 30, 40, 50].map((pageSize) => (\n                <SelectItem key={pageSize} value={`${pageSize}`}>\n                  {pageSize}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n        <div className=\"flex w-[100px] items-center justify-center text-sm font-medium\">\n          Page {table.getState().pagination.pageIndex + 1} of{\" \"}\n          {table.getPageCount()}\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button\n            variant=\"secondary\"\n            size=\"icon\"\n            className=\"hidden size-8 lg:flex\"\n            onClick={() => table.setPageIndex(0)}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <span className=\"sr-only\">Go to first page</span>\n            <ChevronsLeft />\n          </Button>\n          <Button\n            variant=\"secondary\"\n            size=\"icon\"\n            className=\"size-8\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            <span className=\"sr-only\">Go to previous page</span>\n            <ChevronLeft />\n          </Button>\n          <Button\n            variant=\"secondary\"\n            size=\"icon\"\n            className=\"size-8\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            <span className=\"sr-only\">Go to next page</span>\n            <ChevronRight />\n          </Button>\n          <Button\n            variant=\"secondary\"\n            size=\"icon\"\n            className=\"hidden size-8 lg:flex\"\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\n            disabled={!table.getCanNextPage()}\n          >\n            <span className=\"sr-only\">Go to last page</span>\n            <ChevronsRight />\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/data-table/components/data-table/data-table-sort-item.tsx",
      "content": "import { ChevronsUpDown, GripVertical, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Command, CommandEmpty, CommandGroup, CommandInput, CommandItem, CommandList } from \"@/components/ui/command\";\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { Column } from \"@tanstack/react-table\";\nimport { useState } from \"react\";\n\ninterface DataTableSortItemProps<TData> {\n  id: string;\n  column?: string;\n  direction: \"asc\" | \"desc\";\n  onColumnChange: (id: string, column: string) => void;\n  onDirectionChange: (id: string, direction: \"asc\" | \"desc\") => void;\n  onRemove: (id: string) => void;\n  columns: Column<TData, unknown>[];\n}\n\nexport default function DataTableSortItem<TData>({\n  id,\n  column,\n  direction,\n  onColumnChange,\n  onDirectionChange,\n  onRemove,\n  columns,\n}: DataTableSortItemProps<TData>) {\n  const [open, setOpen] = useState(false);\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1,\n  };\n\n  return (\n    <div \n      ref={setNodeRef} \n      style={style}\n      className=\"flex flex-row gap-2 items-center w-full\"\n    >\n      <Button \n        variant=\"ghost\" \n        size=\"icon\"\n        {...attributes}\n        {...listeners}\n        className=\"cursor-grab active:cursor-grabbing\"\n      >\n        <GripVertical className=\"w-4 h-4\" />\n      </Button>\n\n      <Popover open={open} onOpenChange={setOpen}>\n        <PopoverTrigger asChild>\n          <Button variant=\"outline\" className=\"flex-1\">\n            <span className=\"flex-1 text-left capitalize\">\n              {column ? \n                (columns.find(col => col.id === column)?.columnDef.meta?.label ?? column) \n                : \"Column\"\n              }\n            </span>\n            <ChevronsUpDown className=\"w-4 h-4\" />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent align=\"start\" className=\"p-0\">\n          <Command>\n            <CommandInput placeholder=\"Search column\" />\n            <CommandList>\n              <CommandEmpty>No results found.</CommandEmpty>\n              <CommandGroup>\n                {columns.map((col) => (\n                  <CommandItem\n                    key={col.id}\n                    onSelect={() => {\n                      onColumnChange(id, col.id);\n                      setOpen(false);\n                    }}\n                    className=\"capitalize\"\n                  >\n                    {col.columnDef.meta?.label ?? col.id}\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n\n      <Select value={direction} onValueChange={(value: \"asc\" | \"desc\") => onDirectionChange(id, value)}>\n        <SelectTrigger className=\"w-[5.25rem]\">\n          <SelectValue placeholder=\"Sort\" />\n        </SelectTrigger>\n        <SelectContent>\n          <SelectItem value=\"asc\">Asc</SelectItem>\n          <SelectItem value=\"desc\">Desc</SelectItem>\n        </SelectContent>\n      </Select>\n\n      <Button variant=\"ghost\" size=\"icon\" onClick={() => onRemove(id)}>\n        <X className=\"w-4 h-4\" />\n      </Button>\n    </div>\n  );\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/data-table/components/data-table/data-table-sort.tsx",
      "content": "import { ChevronRight, ChevronsUpDown, Plus } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Popover, PopoverContent, PopoverTrigger } from \"@/components/ui/popover\";\nimport { useState, useEffect } from \"react\";\nimport DataTableSortItem from \"./data-table-sort-item\";\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragEndEvent,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { SortingState, Table } from \"@tanstack/react-table\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface SortItem {\n  id: string;\n  column?: string;\n  direction: \"asc\" | \"desc\";\n}\n\ninterface DataTableSortProps<TData> {\n  table: Table<TData>;\n}\n\nexport default function DataTableSort<TData>({ table }: DataTableSortProps<TData>) {\n  const [sortItems, setSortItems] = useState<SortItem[]>([]);\n  const [open, setOpen] = useState(false);\n\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  // Sync sortItems with table's sorting state\n  useEffect(() => {\n    const currentSorting = table.getState().sorting;\n    if (currentSorting.length > 0) {\n      const newSortItems: SortItem[] = currentSorting.map((sort, index) => ({\n        id: `${sort.id}-${index}`, // Create unique ID\n        column: sort.id,\n        direction: sort.desc ? \"desc\" : \"asc\",\n      }));\n      setSortItems(newSortItems);\n    } else {\n      // If no sorting is applied, show one empty sort item\n      setSortItems([{ id: \"1\", direction: \"asc\" }]);\n    }\n  }, [table.getState().sorting]);\n\n  const addSortItem = () => {\n    const newId = Date.now().toString(); // Use timestamp for unique IDs\n    setSortItems([...sortItems, { id: newId, direction: \"asc\" }]);\n  };\n\n  const removeSortItem = (id: string) => {\n    setSortItems(sortItems.filter(item => item.id !== id));\n  };\n\n  const updateSortItemColumn = (id: string, column: string) => {\n    setSortItems(sortItems.map(item => \n      item.id === id ? { ...item, column } : item\n    ));\n  };\n\n  const updateSortItemDirection = (id: string, direction: \"asc\" | \"desc\") => {\n    setSortItems(sortItems.map(item => \n      item.id === id ? { ...item, direction } : item\n    ));\n  };\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n\n    if (over && active.id !== over.id) {\n      setSortItems((items) => {\n        const oldIndex = items.findIndex((item) => item.id === active.id);\n        const newIndex = items.findIndex((item) => item.id === over.id);\n\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  };\n\n  const applySort = () => {\n    const sorting: SortingState = sortItems\n      .filter((item) => !!item.column)\n      .map((item) => ({\n        id: item.column!,\n        desc: item.direction === \"desc\",\n      }));\n    table.setSorting(sorting);\n    setOpen(false); // Close the popover after applying sort\n  };\n\n  const columns = table\n    .getAllColumns()\n    .filter(\n      (column) =>\n        typeof column.accessorFn !== \"undefined\" && column.getCanSort()\n    );\n\n  // Get the actual number of applied sorts from the table state\n  const appliedSortCount = table.getState().sorting.length;\n\n  return (\n    <Popover open={open} onOpenChange={setOpen}>\n      <PopoverTrigger asChild>\n        <Button variant=\"outline\">\n          <ChevronsUpDown className=\"w-4 h-4\" />\n          <div>Sort</div>\n          <Badge variant=\"secondary\">\n            {appliedSortCount}\n          </Badge>\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent align=\"start\" className=\"w-sm p-3\">\n        <div className=\"flex flex-col gap-3 w-full\">\n          <p className=\"text-sm font-medium text-muted-foreground\">\n            Sort by:\n          </p>\n          \n          <DndContext\n            sensors={sensors}\n            collisionDetection={closestCenter}\n            onDragEnd={handleDragEnd}\n          >\n            <SortableContext items={sortItems.map(item => item.id)} strategy={verticalListSortingStrategy}>\n              {sortItems.map((item) => (\n                <DataTableSortItem\n                  key={item.id}\n                  id={item.id}\n                  column={item.column}\n                  direction={item.direction}\n                  onColumnChange={updateSortItemColumn}\n                  onDirectionChange={updateSortItemDirection}\n                  onRemove={removeSortItem}\n                  columns={columns}\n                />\n              ))}\n            </SortableContext>\n          </DndContext>\n\n          <Separator />\n\n          <div className=\"flex flex-row gap-3 items-center justify-between\">\n            <Button variant=\"secondary\" onClick={addSortItem} className=\"flex flex-row items-center h-8\">\n              <Plus className=\"w-4 h-4\" />\n              Add\n            </Button>\n            <Button variant=\"default\" onClick={applySort} className=\"flex flex-row items-center h-8\">\n              Apply\n              <ChevronRight className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/data-table/components/data-table/data-table-toolbar.tsx",
      "content": "import { DataTableViewOptions } from \"./data-table-view-options\"\nimport { Table } from \"@tanstack/react-table\"\nimport DataTableFilter from \"./data-table-filter\"\nimport DataTableSort from \"./data-table-sort\"\nimport { X } from \"lucide-react\"\nimport { Button } from \"@/components/ui/button\"\n\ninterface DataTableToolbarProps<TData> {\n    table: Table<TData>\n  }\n\nexport default function DataTableToolbar<TData>({ table }: DataTableToolbarProps<TData>) {\n    \n  // Check if there are any active sorts or filters\n  const hasActiveSorts = table.getState().sorting.length > 0\n  const hasActiveFilters = table.getState().columnFilters.length > 0\n  const hasActiveFiltersOrSorts = hasActiveSorts || hasActiveFilters\n\n  const clearAllFiltersAndSorts = () => {\n    table.setSorting([])\n    table.setColumnFilters([])\n  }\n\n  return (\n    <div className=\"flex items-center\">\n      <div className=\"flex items-center gap-2\">\n        <DataTableSort table={table} />\n        <DataTableFilter table={table} />\n        {hasActiveFiltersOrSorts && (\n          <Button variant=\"outline\" size=\"icon\" onClick={clearAllFiltersAndSorts}>\n            <X className=\"size-4 cursor-pointer\" />\n          </Button>\n        )}\n      </div>\n\n      <DataTableViewOptions table={table} />\n\n    </div>\n  )\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/data-table/components/data-table/data-table-view-options.tsx",
      "content": "\"use client\"\n\nimport {\n  DndContext,\n  closestCenter,\n  type DragEndEvent,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n} from \"@dnd-kit/core\"\nimport {\n  SortableContext,\n  arrayMove,\n  sortableKeyboardCoordinates,\n  useSortable,\n  verticalListSortingStrategy,\n} from \"@dnd-kit/sortable\"\nimport { CSS } from \"@dnd-kit/utilities\"\nimport { type Column, Table } from \"@tanstack/react-table\"\nimport { GripVertical, Settings2 } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\"\n\ninterface SortableColumnProps<TData> {\n  column: Column<TData, unknown>\n}\n\nfunction SortableColumn<TData>({ column }: SortableColumnProps<TData>) {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: column.id })\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1,\n    zIndex: isDragging ? 1 : 0,\n    position: \"relative\" as const,\n  }\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      className=\"flex w-full items-center justify-between\"\n    >\n      <DropdownMenuCheckboxItem\n        className=\"w-full capitalize\"\n        checked={column.getIsVisible() ?? true}\n        onCheckedChange={(value) => column.toggleVisibility(!!value)}\n        onSelect={(event) => event.preventDefault()}\n      >\n        {column.columnDef.meta?.label ?? column.id}\n      </DropdownMenuCheckboxItem>\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        className=\"cursor-grab hover:cursor-grabbing\"\n        {...attributes}\n        {...listeners}\n      >\n        <GripVertical className=\"size-4\" />\n      </Button>\n    </div>\n  )\n}\n\nexport function DataTableViewOptions<TData>({\n  table,\n}: {\n  table: Table<TData>\n}) {\n  const { columnOrder } = table.getState()\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  )\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event\n    if (over && active.id !== over.id) {\n      const oldIndex = columnOrder.indexOf(active.id as string)\n      const newIndex = columnOrder.indexOf(over.id as string)\n      table.setColumnOrder(arrayMove(columnOrder, oldIndex, newIndex))\n    }\n  }\n\n  // Get all columns for ordering (including non-hideable ones)\n  const allColumns = table.getAllColumns()\n  \n  // Get only hideable columns for the view options display\n  const hideableColumns = React.useMemo(() => {\n    const columns =\n      columnOrder.length > 0\n        ? columnOrder\n            .map((id) => table.getColumn(id))\n            .filter(\n              (col): col is Column<TData, unknown> => {\n                if (!col || typeof col.accessorFn === \"undefined\") return false\n                const canHide = col.getCanHide()\n                return canHide === true\n              }\n            )\n        : table\n            .getAllColumns()\n            .filter(\n              (column) => {\n                if (typeof column.accessorFn === \"undefined\") return false\n                const canHide = column.getCanHide()\n                return canHide === true\n              }\n            )\n    return columns\n  }, [columnOrder, table])\n\n  // Initialize column order with all columns if not set\n  React.useEffect(() => {\n    if (columnOrder.length === 0 && allColumns.length > 0) {\n      table.setColumnOrder(allColumns.map((c) => c.id))\n    }\n  }, [columnOrder.length, allColumns, table])\n\n  return (\n    <DropdownMenu>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className=\"ml-auto\">\n          <Settings2 />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"\">\n        <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>\n        <DropdownMenuSeparator />\n        <DndContext\n          sensors={sensors}\n          collisionDetection={closestCenter}\n          onDragEnd={handleDragEnd}\n        >\n          <SortableContext\n            items={hideableColumns.map((c) => c.id)}\n            strategy={verticalListSortingStrategy}\n          >\n            {hideableColumns.map((column) => (\n              <SortableColumn key={column.id} column={column} />\n            ))}\n          </SortableContext>\n        </DndContext>\n      </DropdownMenuContent>\n    </DropdownMenu>\n  )\n}\n",
      "type": "registry:component"
    },
    {
      "path": "registry/data-table/components/data-table/data-table.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { useRouter, useSearchParams, usePathname } from \"next/navigation\"\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n  PaginationState,\n} from \"@tanstack/react-table\"\n\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\"\n\nimport { DataTablePagination } from \"./data-table-pagination\"\nimport DataTableToolbar from \"./data-table-toolbar\"\nimport { \n  DataTableState, \n  serializeTableState, \n  updateSearchParams \n} from \"@/lib/data-table\"\n\ninterface DataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n  initialState?: Partial<DataTableState>\n}\n\nexport function DataTable<TData, TValue>({\n  columns,\n  data,\n  initialState,\n}: DataTableProps<TData, TValue>) {\n  const router = useRouter()\n  const pathname = usePathname()\n  const searchParams = useSearchParams()\n\n  const [sorting, setSorting] = React.useState<SortingState>(\n    initialState?.sorting ?? []\n  )\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    initialState?.columnFilters ?? []\n  )\n  const [columnVisibility, setColumnVisibility] = React.useState<VisibilityState>(\n    initialState?.columnVisibility ?? {}\n  )\n  const [rowSelection, setRowSelection] = React.useState({})\n  const [pagination, setPagination] = React.useState<PaginationState>(\n    initialState?.pagination ?? { pageIndex: 0, pageSize: 10 }\n  )\n  const [columnOrder, setColumnOrder] = React.useState<string[]>(\n    initialState?.columnOrder ?? []\n  )\n\n  // Sync state changes to URL\n  React.useEffect(() => {\n    const currentState: DataTableState = {\n      pagination,\n      sorting,\n      columnFilters,\n      columnVisibility,\n      columnOrder,\n    }\n\n    const newParams = serializeTableState(currentState)\n    const updatedSearchParams = updateSearchParams(searchParams, newParams)\n    \n    // Only update URL if parameters actually changed\n    const currentUrl = `${pathname}?${searchParams.toString()}`\n    const newUrl = `${pathname}?${updatedSearchParams.toString()}`\n    \n    if (currentUrl !== newUrl) {\n      router.replace(newUrl, { scroll: false })\n    }\n  }, [pagination, sorting, columnFilters, columnVisibility, columnOrder, router, pathname, searchParams])\n\n  const table = useReactTable({\n    data,\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    onSortingChange: setSorting,\n    getSortedRowModel: getSortedRowModel(),\n    onColumnFiltersChange: setColumnFilters,\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    onPaginationChange: setPagination,\n    onColumnOrderChange: setColumnOrder,\n    enableMultiSort: true,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n      pagination,\n      columnOrder,\n    },\n  })\n\n  return (\n    <div>\n        <div className=\"pb-2\">\n            <DataTableToolbar table={table} />\n        </div>\n\n        <div className=\"rounded-md border\">\n            <Table>\n                <TableHeader>\n                {table.getHeaderGroups().map((headerGroup) => (\n                    <TableRow key={headerGroup.id}>\n                    {headerGroup.headers.map((header) => {\n                        return (\n                        <TableHead key={header.id}>\n                            {header.isPlaceholder\n                            ? null\n                            : flexRender(\n                                header.column.columnDef.header,\n                                header.getContext()\n                                )}\n                        </TableHead>\n                        )\n                    })}\n                    </TableRow>\n                ))}\n                </TableHeader>\n                <TableBody>\n                {table.getRowModel().rows?.length ? (\n                    table.getRowModel().rows.map((row) => (\n                    <TableRow\n                        key={row.id}\n                        data-state={row.getIsSelected() && \"selected\"}\n                    >\n                        {row.getVisibleCells().map((cell) => (\n                        <TableCell key={cell.id}>\n                            {flexRender(cell.column.columnDef.cell, cell.getContext())}\n                        </TableCell>\n                        ))}\n                    </TableRow>\n                    ))\n                ) : (\n                    <TableRow>\n                    <TableCell colSpan={columns.length} className=\"h-24 text-center\">\n                        No results.\n                    </TableCell>\n                    </TableRow>\n                )}\n                </TableBody>\n            </Table>\n        </div>\n        \n        <div className=\"pt-2\">\n            <DataTablePagination table={table} />\n        </div>\n    </div>\n  )\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/data-table/components/data-table-example-contacts/data-table-example-contacts.tsx",
      "content": "import { columns } from \"./columns\"\nimport { DataTable } from \"@/components/data-table/data-table\"\nimport { parseSearchParams, SearchParams } from \"@/lib/data-table\"\nimport { createClient } from \"@/lib/supabase/client\"\n\n// This type is used to define the shape of our data.\n// You can use a Zod schema here if you want.\nexport type Contacts = {\n    id: string, \n    created_at?: string, \n    updated_at?: string, \n    first_name?: string, \n    last_name?: string, \n    display_name?: string, \n    nickname?: string | null, \n    primary_email?: string, \n    primary_phone?: string, \n    company?: string, \n    job_title?: string, \n    birthday?: string, \n    notes?: string, \n    is_favorite?: boolean, \n    tags?: string[] | null, \n  }\n\n  async function getData(): Promise<Contacts[]> {\n\n    const supabase = await createClient()\n\n    const { data, error } = await supabase\n    .from(\"registry_contacts\")\n    .select(\"*\")\n\n    if (error) {\n      console.error(error)\n    }\n\n    return data as Contacts[]\n}\n\ninterface DataTableExampleContactsProps {\n  searchParams?: SearchParams\n}\n\nexport default async function DataTableExampleContacts({ \n  searchParams = {} \n}: DataTableExampleContactsProps) {\n  const data = await getData()\n  const initialState = parseSearchParams(searchParams)\n\n  return (\n    <div className=\"\">\n      <DataTable \n        columns={columns} \n        data={data} \n        initialState={initialState}\n      />\n    </div>\n  )\n}",
      "type": "registry:component"
    },
    {
      "path": "registry/data-table/components/data-table-example-contacts/columns.tsx",
      "content": "\"use client\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\"\nimport { MoreHorizontal, Star } from \"lucide-react\"\nimport { ColumnDef } from \"@tanstack/react-table\"\nimport { Checkbox } from \"@/components/ui/checkbox\"\nimport { Badge } from \"@/components/ui/badge\"\nimport { DataTableColumnHeader } from \"../data-table/data-table-column-header\"\nimport { Contacts } from \"./data-table-example-contacts\"\nimport { customFilterFn } from \"@/lib/data-table\"\n\nexport const columns: ColumnDef<Contacts>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"display_name\",\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Name\" />,\n    cell: ({ row }) => {\n      const displayName = row.getValue(\"display_name\") as string\n\n      return (\n        <div className=\"flex items-center gap-2\">\n            <span className=\"font-medium\">{displayName}</span>\n        </div>\n      )\n    },\n    meta: {\n      label: \"Name\",\n      variant: \"text\",\n      placeholder: \"Search names...\",\n    },\n    enableColumnFilter: true,\n    filterFn: customFilterFn,\n  },\n  {\n    accessorKey: \"primary_email\",\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Email\" />,\n    cell: ({ row }) => {\n      const email = row.getValue(\"primary_email\") as string\n      return <div className=\"text-muted-foreground\">{email}</div>\n    },\n    meta: {\n      label: \"Email\",\n      variant: \"text\",\n      placeholder: \"Search emails...\",\n    },\n    enableColumnFilter: true,\n    filterFn: customFilterFn,\n  },\n  {\n    accessorKey: \"primary_phone\",\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Phone\" />,\n    cell: ({ row }) => {\n      const phone = row.getValue(\"primary_phone\") as string\n      if (!phone) return <div className=\"text-muted-foreground\">—</div>\n      \n      // Format phone number as (XXX) XXX-XXXX\n      const formatted = phone.replace(/(\\d{3})(\\d{3})(\\d{4})/, '($1) $2-$3')\n      \n      return <div className=\"text-muted-foreground\">{formatted}</div>\n    },\n    meta: {\n      label: \"Phone\",\n      variant: \"text\",\n      placeholder: \"Search phone numbers...\",\n    },\n    enableColumnFilter: true,\n    filterFn: customFilterFn,\n  },\n  {\n    accessorKey: \"company\",\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Company\" />,\n    cell: ({ row }) => {\n      const company = row.getValue(\"company\") as string\n      return <div className=\"\">{company}</div>\n    },\n    meta: {\n      label: \"Company\",\n      variant: \"text\",\n      placeholder: \"Search companies...\",\n    },\n    enableColumnFilter: true,\n    filterFn: customFilterFn,\n  },\n  {\n    accessorKey: \"job_title\",\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Job Title\" />,\n    cell: ({ row }) => {\n      const jobTitle = row.getValue(\"job_title\") as string\n      return <div className=\"text-sm\">{jobTitle}</div>\n    },\n    meta: {\n      label: \"Job Title\",\n      variant: \"text\",\n      placeholder: \"Search job titles...\",\n    },\n    enableColumnFilter: true,\n    filterFn: customFilterFn,\n  },\n  {\n    accessorKey: \"tags\",\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Tags\" />,\n    cell: ({ row }) => {\n      const tags = row.getValue(\"tags\") as string[] | null\n      \n      if (!tags || tags.length === 0) {\n        return <div className=\"text-muted-foreground\">—</div>\n      }\n      \n      return (\n        <div className=\"flex flex-wrap gap-1\">\n          {tags.map((tag) => (\n            <Badge key={tag} variant=\"outline\" className=\"text-xs\">\n              {tag}\n            </Badge>\n          ))}\n        </div>\n      )\n    },\n    meta: {\n      label: \"Tags\",\n      variant: \"multiSelect\",\n      options: [\n        { label: \"Engineering\", value: \"engineering\" },\n        { label: \"Product\", value: \"product\" },\n        { label: \"Analytics\", value: \"analytics\" },\n        { label: \"Operations\", value: \"ops\" },\n        { label: \"Marketing\", value: \"marketing\" },\n        { label: \"Investing\", value: \"investing\" },\n        { label: \"Developer\", value: \"developer\" },\n        { label: \"AI\", value: \"ai\" },\n        { label: \"CTO\", value: \"cto\" },\n        { label: \"Design\", value: \"design\" },\n        { label: \"Energy\", value: \"energy\" },\n        { label: \"Sustainability\", value: \"sustainability\" },\n        { label: \"Automation\", value: \"automation\" },\n        { label: \"Leadership\", value: \"leadership\" },\n        { label: \"Business\", value: \"business\" },\n        { label: \"Founder\", value: \"founder\" },\n        { label: \"Operations\", value: \"operations\" },\n        { label: \"Creative\", value: \"creative\" },\n        { label: \"Compliance\", value: \"compliance\" },\n      ],\n    },\n    enableColumnFilter: true,\n    filterFn: customFilterFn,\n  },\n  {\n    accessorKey: \"created_at\",\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Created\" />,\n    cell: ({ row }) => {\n      const createdAt = row.getValue(\"created_at\") as string\n      if (!createdAt) return <div className=\"text-muted-foreground\">—</div>\n      \n      const date = new Date(createdAt)\n      const formatted = new Intl.DateTimeFormat(\"en-US\", {\n        month: \"short\",\n        day: \"numeric\",\n        year: \"numeric\",\n      }).format(date)\n      \n      return <div className=\"text-sm text-muted-foreground\">{formatted}</div>\n    },\n    meta: {\n      label: \"Created\",\n      variant: \"date\",\n    },\n    enableColumnFilter: true,\n    filterFn: customFilterFn,\n  },\n  {\n    accessorKey: \"updated_at\",\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Updated\" />,\n    cell: ({ row }) => {\n      const updatedAt = row.getValue(\"updated_at\") as string\n      if (!updatedAt) return <div className=\"text-muted-foreground\">—</div>\n      \n      const date = new Date(updatedAt)\n      const formatted = new Intl.DateTimeFormat(\"en-US\", {\n        month: \"short\",\n        day: \"numeric\",\n        year: \"numeric\",\n      }).format(date)\n      \n      return <div className=\"text-sm text-muted-foreground\">{formatted}</div>\n    },\n    meta: {\n      label: \"Updated\",\n      variant: \"date\",\n    },\n    enableColumnFilter: true,\n    filterFn: customFilterFn,\n  },\n  {\n    accessorKey: \"is_favorite\",\n    header: ({ column }) => <DataTableColumnHeader column={column} title=\"Favorite\" />,\n    cell: ({ row }) => {\n      const isFavorite = row.getValue(\"is_favorite\") as boolean\n      return (\n        <div className=\"flex justify-center\">\n          {isFavorite ? (\n                <Star className=\"size-5 fill-yellow-400 text-yellow-700 dark:text-yellow-400 dark:fill-yellow-900/30\" strokeWidth={1} />\n            ) : (\n                <Star className=\"size-5 fill-gray-200 text-gray-400 dark:text-gray-400 dark:fill-gray-900/30\" strokeWidth={1} />\n            )}\n        </div>\n      )\n    },\n    meta: {\n      label: \"Favorite\",\n      variant: \"boolean\",\n    },\n    enableColumnFilter: true,\n    filterFn: customFilterFn,\n  },\n  {\n    id: \"actions\",\n    cell: ({ row }) => {\n      const contact = row.original\n      return (\n        <div className=\"flex justify-end\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n                <span className=\"sr-only\">Open menu</span>\n                <MoreHorizontal className=\"h-4 w-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuLabel>Actions</DropdownMenuLabel>\n              <DropdownMenuItem\n                onClick={() => navigator.clipboard.writeText(contact.id)}\n              >\n                Copy contact ID\n              </DropdownMenuItem>\n              <DropdownMenuItem\n                onClick={() => navigator.clipboard.writeText(contact.primary_email || \"\")}\n              >\n                Copy email\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem>Edit contact</DropdownMenuItem>\n              <DropdownMenuItem>View details</DropdownMenuItem>\n              <DropdownMenuItem\n                onClick={() => {\n                  // Toggle favorite logic would go here\n                  console.log(\"Toggle favorite for\", contact.display_name)\n                }}\n              >\n                {contact.is_favorite ? \"Remove from favorites\" : \"Add to favorites\"}\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      )\n    },\n  },\n]\n",
      "type": "registry:component"
    },
    {
      "path": "registry/data-table/pages/data-table-example-contacts/page.tsx",
      "content": "import DataTableExampleContacts from \"@/components/data-table-example-contacts/data-table-example-contacts\";\n\nexport default async function DataTableExampleContactsPage({\n  searchParams,\n}: {\n  searchParams: Promise<{ [key: string]: string | string[] | undefined }>\n}) {\n  const params = await searchParams\n\n  return (\n    <main className=\"px-3 py-10 w-full max-w-5xl mx-auto\">\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold\">Data Table Example</h1>\n        <p className=\"text-muted-foreground\">\n          A complete data table with sorting, filtering, pagination, and URL state management.\n        </p>\n      </div>\n      <DataTableExampleContacts searchParams={params} />\n    </main>\n  )\n}",
      "type": "registry:page",
      "target": "app/data-table-example-contacts/page.tsx"
    }
  ],
  "docs": "Setup Instructions:\n\n1. Copy .env.example to .env.local and add your Supabase credentials\n2. Run the database.sql script in your Supabase SQL editor to create the contacts table\n3. Copy middleware.ts to your project root (or merge with existing middleware)\n4. Ensure your tsconfig.json paths are configured correctly\n\nSee README.md for detailed setup instructions and troubleshooting.",
  "categories": [
    "table",
    "data",
    "dashboard"
  ]
}